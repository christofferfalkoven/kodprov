/// DO NOT EDIT THIS FILE

public interface Seq<T> {
    /// Inserts an element at the back of a list
    /// Example:
    /// list == [1, 2]
    /// list.append(3)
    /// list == [1, 2, 3]
    public void append(T element);

    /// Inserts an element at the front of a list
    /// Example:
    /// list == [1, 2]
    /// list.prepend(3)
    /// list == [3, 1, 2]
    public void prepend(T element);

    /// Removes the first occurrence of an element from the list
    /// Example 1:
    /// list == [1, 2, 1]
    /// list.remove(1)
    /// list == [2, 1]
    ///
    /// Example 2:
    /// list == [1, 2, 1]
    /// list.remove(3)
    /// list == [1, 2, 1]
    public void remove(T element);

    /// Returns true if a given element is in the list
    /// Example:
    /// list == [1, 2, 3]
    /// list.contains(2) ==> true
    /// list.contains(4) ==> false
    /// NOTE: element comparison is structural, i.e. not based on identity comparison,
    /// Example:
    /// list.append(new String("Deeeo!"))
    /// list.contains(new String("Deeeo!")) ==> true
    public boolean contains(T element);

    /// Returns the size of the list
    /// Example:
    /// list == [1, 2, 3]
    /// list.size() ==> 3
    public int size();

    /// Returns the ith element in the list
    /// Example:
    /// list == [1, 2, 3]
    /// list.get(0) ==> 1
    /// list.get(1) ==> 2
    /// list.get(2) ==> 3
    /// list.get(n) ==> throws IllegalArgumentException when n not in [0..list.size()-1]
    public T get(int index);

    /// Returns the first element in the list
    /// Example:
    /// list == [1, 2, 3]
    /// list.first() ==> 1
    public T first();

    /// Returns the last element in the list
    /// Example:
    /// list == [1, 2, 3]
    /// list.last() ==> 3
    public T last();

    /// Removes the first elemnet in the list and inserts it last
    /// Example:
    /// list == [1, 2, 3]
    /// list.rotate()
    /// list == [2, 3, 1]
    public void rotate();

    public  T current();
    public  void display();

    }


